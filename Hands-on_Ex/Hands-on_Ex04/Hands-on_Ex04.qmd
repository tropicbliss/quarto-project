---
title: "Hands-on Exercise 4"
author: "Eugene Toh"
date: "last-modified"
execute:
  freeze: true
---

# 2nd Order Spatial Point Patterns Analysis Methods

Spatial Point Pattern Analysis involves assessing the distribution of points on a surface to understand underlying patterns. In this context, the points of interest are the locations of childcare centers in Singapore. The analysis seeks to answer two key questions:

1.  **Are the childcare centers in Singapore randomly distributed across the country?**

    -   This question examines whether the placement of childcare centers follows a random pattern or if there is some underlying structure influencing their distribution.

2.  **If the distribution is not random, where are the locations with a higher concentration of childcare centers?**

    -   This question aims to identify specific areas in Singapore that have a higher density of childcare centers, indicating potential clusters or hotspots.

Using functions from the `spatstat` package, the analysis will explore the spatial point processes governing the distribution of childcare centers, providing insights into the randomness or clustering of these facilities.

## Importing data

```{r}
pacman::p_load(sf, raster, spatstat, tmap, tidyverse)
childcare_sf <- st_read("data/child-care-services-geojson.geojson") %>%
  st_transform(crs = 3414)
sg_sf <- st_read(dsn = "data", layer="CostalOutline")
mpsz_sf <- st_read(dsn = "data", layer = "MP14_SUBZONE_WEB_PL")
```

Now let's check if the data imported has the correct projections:

```{r}
st_crs(childcare_sf)
```

```{r}
st_crs(mpsz_sf)
```

```{r}
st_crs(sg_sf)
```

Now, let's assign the correct CRS to the following data:

```{r}
mpsz_sf <- mpsz_sf %>% st_set_crs(3414)


```

## Mapping the geospatial data sets

```{r}
tmap_mode('plot')
tm_shape(mpsz_sf) +
  tm_fill() + # draw polygons without borders
  tm_borders() + # draw borders
  tm_shape(childcare_sf) +
  tm_dots() # draw points
```

The advantage of this interactive pin map is it allows us to navigate and zoom around the map freely. We can also query the information of each simple feature (i.e. the point) by clicking of them. Last but not least, you can also change the background of the internet map layer. Currently, three internet map layers are provided. They are: ESRI.WorldGrayCanvas, OpenStreetMap, and ESRI.WorldTopoMap. The default is ESRI.WorldGrayCanvas.

Always remember to switch back to plot mode after the interactive map. This is because, each interactive mode will consume a connection. You should also avoid displaying ecessive numbers of interactive maps (i.e. not more than 10) in one RMarkdown document when publish on Netlify.

```{r}
tmap_mode("plot")
```

Now, we need to convert the generic `sp` objects into `spatstat`'s `ppp` object.

```{r}
childcare_ppp <- as.ppp(childcare_sf)
childcare_ppp
```

Now, let's plot `childcare_ppp`:

```{r}
plot(childcare_ppp)
```

```{r}
summary(childcare_ppp)
```

In spatial point pattern analysis, the concept of **duplicates** or **coincident points** refers to multiple points that occupy the exact same location in space.

Many statistical methods in spatial point pattern analysis are based on the assumption that the underlying point process is *simple*. A *simple* point process means that no two points in the process can occupy the exact same location (i.e., they cannot be coincident).

If points are coincident, this assumption is violated, and the statistical methods that rely on this assumption may produce invalid or misleading results.

Thus, let's check if there are any duplicate points:

```{r}
any(duplicated(childcare_ppp))
```

As you can see, there doesn't seem to be any duplicated data point.

To count the number of co-indicence point, we will use the *multiplicity()* function as shown in the code chunk below.

```{r}
multiplicity(childcare_ppp)
```

If we want to know how many locations have more than one point event, we can use the code chunk below:

```{r}
sum(multiplicity(childcare_ppp) > 1)
```

To view the locations of any duplicate point events, we will plot `childcare` data by using the code chunk below:

```{r}
coincident_points <- childcare_sf[duplicated(st_geometry(childcare_sf)), ]
tmap_mode('view')
tm_shape(coincident_points) +
  tm_dots(alpha=0.4, 
          size=0.05)
tmap_mode("plot")
```

There are three ways to overcome this problem. The easiest way is to delete the duplicates. But, that will also mean that some useful point events will be lost.

The second solution is use *jittering*. It is used to add a small amount of random noise to the coordinates of points in a spatial point pattern. This process, often referred to as "jittering," helps to separate coincident points (points that have the exact same coordinates) by moving them slightly apart. This can be particularly useful in spatial analyses where coincident points might violate assumptions, such as the assumption that points are not exactly coincident.

The third solution is to make each point “unique” and then attach the duplicates of the points to the patterns as **marks**, as attributes of the points. Then you would need analytical techniques that take into account these marks.

The code chunk below implements the jittering approach.

```{r}
childcare_ppp_jit <- rjitter(childcare_ppp, 
                             retry=TRUE, 
                             nsim=1, 
                             drop=TRUE)
```

Let's see if there are any duplicates now:

```{r}
any(duplicated(childcare_ppp_jit))
```

### Creating `owin` object

When analysing spatial point patterns, it is a good practice to confine the analysis with a geographical area like Singapore boundary. In **spatstat**, an object called ***owin*** is specially designed to represent this polygonal region.

The code chunk below is used to covert *sg* SpatialPolygon object into owin object of **spatstat**.

```{r}
sg_owin <- as.owin(sg_sf)
```

The ouput object can be displayed by using *plot()* function

```{r}
plot(sg_owin)
summary(sg_owin)
```

### Combining point events object and owin object

In this last step of geospatial data wrangling, we will extract childcare events that are located within Singapore by using the code chunk below.

```{r}
childcareSG_ppp = childcare_ppp[sg_owin]
summary(childcareSG_ppp)
```

```{r}
plot(childcareSG_ppp)
```

### Comparing Spatial Point Patterns using KDE

In this section, you will learn how to compare KDE of childcare at Ponggol, Tampines, Chua Chu Kang and Jurong West planning areas.

The code chunk below will be used to extract the target planning areas.

```{r}
pg <- mpsz_sf %>%
  filter(PLN_AREA_N == "PUNGGOL")
tm <- mpsz_sf %>%
  filter(PLN_AREA_N == "TAMPINES")
ck <- mpsz_sf %>%
  filter(PLN_AREA_N == "CHOA CHU KANG")
jw <- mpsz_sf %>%
  filter(PLN_AREA_N == "JURONG WEST")
```

Plotting target planning areas:

```{r}
par(mfrow=c(2,2))
plot(pg, main = "Ponggol")
```

```{r}
plot(tm, main = "Tampines")
```

```{r}
plot(ck, main = "Choa Chu Kang")
```

```{r}
plot(jw, main = "Jurong West")
```

Now, we will convert these sf objects into owin objects that is required by **spatstat**.

```{r}
pg_owin = as.owin(pg)
tm_owin = as.owin(tm)
ck_owin = as.owin(ck)
jw_owin = as.owin(jw)
```

By using the code chunk below, we are able to extract childcare that is within the specific region to do our analysis later on.

Now why would you bother to split them up? To analyse spatial randomness it is essential to exclude regions like the airport where there are no childcare centres.

```{r}
childcare_pg_ppp = childcare_ppp_jit[pg_owin]
childcare_tm_ppp = childcare_ppp_jit[tm_owin]
childcare_ck_ppp = childcare_ppp_jit[ck_owin]
childcare_jw_ppp = childcare_ppp_jit[jw_owin]
```

Next, *rescale.ppp()* function is used to trasnform the unit of measurement from metre to kilometre.

```{r}
childcare_pg_ppp.km = rescale.ppp(childcare_pg_ppp, 1000, "km")
childcare_tm_ppp.km = rescale.ppp(childcare_tm_ppp, 1000, "km")
childcare_ck_ppp.km = rescale.ppp(childcare_ck_ppp, 1000, "km")
childcare_jw_ppp.km = rescale.ppp(childcare_jw_ppp, 1000, "km")
```

The code chunk below is used to plot these four study areas and the locations of the childcare centres.

```{r}
par(mfrow=c(2,2))
plot(childcare_pg_ppp.km, main="Punggol")
plot(childcare_tm_ppp.km, main="Tampines")
plot(childcare_ck_ppp.km, main="Choa Chu Kang")
plot(childcare_jw_ppp.km, main="Jurong West")
```

## Analysing Spatial Point Process Using G-Function

The G function measures the distribution of the distances from an arbitrary event to its nearest event. In this section, you will learn how to compute G-function estimation by using [*Gest()*](https://rdrr.io/cran/spatstat/man/Gest.html) of **spatstat** package. You will also learn how to perform monta carlo simulation test using [*envelope()*](https://rdrr.io/cran/spatstat/man/envelope.html) of **spatstat** package.

Note that it is typical for randomness to occur when the area of analysis is high. It is important to figure out that at what distance does clustering occur and at what distance randomness starts to appear again. This can be done using the L function. We can further modify the L function to make it from a diagonal to a straight line. We have lots of different functions, like G function (zonal - within a ring buffer, how many points are there, and slowly draw more and more bigger rings, so unlike K function it is not cumulative, there is no straight version of it) or K function (the L function is the same as the K function except a transformation is applied to the result to make the graph straight, making it easier to interpret). Each employ a different shape but they are all distance based. Some analyse distances zone by zone while some are cumulative.

It essentially answers the question: "given a point in the spatial pattern, what is the probability that the nearest neighboring point is within a certain distance `r`"?

-   **x-axis (`r`):** This represents the distance (in the same units as your spatial data).

-   **y-axis (G(r)):** This is the cumulative probability that the nearest neighbor distance is less than or equal to `r`.

### Computing G-function estimation

The code chunk below is used to compute G-function using *Gest()* of **spatat** package for the Chua Chu Kang planning area.

```{r}
G_CK = Gest(childcare_ck_ppp, correction = "border")
plot(G_CK, xlim=c(0,500))
```

If the curve rises steeply at short distances, it indicates that most points have a nearby neighbor, suggesting a clustered pattern. If the curve rises more gradually, it indicates a more dispersed pattern where points are further apart on average. A linear increase in the G-function typically suggests a random or Poisson process, where points are randomly distributed. If you have plotted the theoretical G-function (usually a straight line), deviations from this line indicate either clustering (curve above the theoretical line) or regularity (curve below the theoretical line).

The `correction = "border"` parameter adjusts the G-function to account for edge effects, which occur because points near the boundary of the study region have fewer neighboring points within the study area.

`xlim=c(0,500)` limits the distance axis to between 0 and 500 units. You would analyze the curve within this range to understand the distribution of nearest neighbor distances among your spatial points.

Now for the Tampines planning area:

```{r}
G_tm = Gest(childcare_tm_ppp, correction = "best")
plot(G_tm)
```

#### Hypothesis testing

To confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:

Ho = The distribution of childcare services at Choa Chu Kang are randomly distributed.

H1= The distribution of childcare services at Choa Chu Kang are not randomly distributed.

The null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.

```{r}
G_CK.csr <- envelope(childcare_ck_ppp, Gest, nsim = 999)
```

Since you are using more simulation iterations, the time taken to run the tests will be longer. Since this is essentially Monte Carlo simulation, to satisfy a 95% confidence interval, we need a minimum of 39 for convergence. 99, 199, 999 are common values. We need a greater amount to achieve a more stable result. Note that 99 means that you are running it 100 times.

```{r}
plot(G_CK.csr)
```

For the Tampines planning area:

```{r}
G_tm.csr <- envelope(childcare_tm_ppp, Gest, correction = "all", nsim = 999)
```

```{r}
plot(G_tm.csr)
```

Note that it is typical for randomness to occur when the area of analysis is high. It is important to figure out that at what distance does clustering occur and at what distance randomness starts to appear again. This can be done using the L function. We can further modify the L function to make it from a diagonal to a straight line. We have lots of different functions, like G function (zonal - within a ring buffer, how many points are there, and slowly draw more and more bigger rings, so unlike K function it is not cumulative, there is no straight version of it) or K function (the L function is the same as the K function except a transformation is applied to the result to make the graph straight, making it easier to interpret). Each employ a different shape but they are all distance based. Some analyse distances zone by zone while some are cumulative.

Also, if you need a constant result, you have to set the seed. You only have to set the seed once at the top of the document for maximum reproducibility.

### Computing F-function estimation

The F function estimates the empty space function F(r) or its hazard rate h(r) from a point pattern in a window of arbitrary shape. In this section, you will learn how to compute F-function estimation by using [*Fest()*](https://rdrr.io/cran/spatstat/man/Fest.html) of **spatstat** package. You will also learn how to perform monta carlo simulation test using [*envelope()*](https://rdrr.io/cran/spatstat/man/envelope.html) of **spatstat** package.

```{r}
F_CK = Fest(childcare_ck_ppp)
plot(F_CK)
```

The F-function measures the cumulative distribution of distances from a random point in the study region to the nearest point in the point pattern. Essentially, it answers the question: "given a random location in the study area, what is the probability that the nearest point in the pattern is within a distance `r`"?

-   **x-axis (r):** Represents the distance from a random point in the study area to the nearest point in the pattern.

-   **y-axis (F(r)):** Represents the cumulative probability that the distance from a random location to the nearest point is less than or equal to `r`.

A steep rise in the F-function at short distances indicates that most random locations are close to points in the pattern, suggesting a clustered distribution. A more gradual increase suggests that random locations tend to be farther away from points, indicating a more dispersed or regular distribution. Like the G-function, the F-function can be compared against a theoretical model (e.g., a completely random pattern, or CSR). A higher-than-expected F-function indicates clustering, while a lower-than-expected F-function suggests regularity. The F-function focuses on distances from random points to the nearest point in the pattern, while the G-function focuses on distances between points within the pattern itself. The G-function tends to be more sensitive to clustering at short distances, while the F-function can provide complementary information, particularly about the spacing and distribution relative to the overall study area.

Now for the Tampines planning area:

```{r}
F_tm = Fest(childcare_tm_ppp, correction = "best")
plot(F_tm)
```

#### Hypothesis testing

To confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:

Ho = The distribution of childcare services at Choa Chu Kang are randomly distributed.

H1= The distribution of childcare services at Choa Chu Kang are not randomly distributed.

The null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.

```{r}
F_CK.csr <- envelope(childcare_ck_ppp, Fest, nsim = 999)
```

```{r}
plot(F_CK.csr)
```

For the Tampines planning area:

```{r}
F_tm.csr <- envelope(childcare_tm_ppp, Fest, correction = "all", nsim = 999)
```

```{r}
plot(F_tm.csr)
```

### Computing K-function estimation

K-function measures the number of events found up to a given distance of any particular event. In this section, you will learn how to compute K-function estimates by using [*Kest()*](https://rdrr.io/cran/spatstat/man/Kest.html) of **spatstat** package. You will also learn how to perform Monte Carlo simulation test using *envelope()* of spatstat package.

```{r}
K_ck = Kest(childcare_ck_ppp, correction = "Ripley")
plot(K_ck, . -r ~ r, ylab= "K(d)-r", xlab = "d(m)")
```

The K-function answers the question: "how many additional points are found within a distance `r` from an average point, compared to what would be expected if the points were randomly distributed"?

Unlike the G-function (which looks at nearest neighbor distances) or the F-function (which looks at distances from random points to the nearest pattern points), the K-function considers all pairs of points within the pattern. It helps assess clustering or dispersion over a range of distances.

The K-function compares the observed number of points within a certain distance `r` of each point in the pattern to what you would expect if the points were distributed according to a completely spatially random (CSR) process.

-   **x-axis (r):** Represents the distance `r` from a typical point in the pattern.

-   **y-axis (K(r)):** Represents the cumulative count of neighboring points within distance `r`, adjusted for the density of the points.

<!-- -->

-   **CSR (Complete Spatial Randomness) Line:** If the points are randomly distributed, the K-function typically follows a linear relationship with distance `r`.

-   **Above the CSR Line (K(r) \> CSR):** If the observed K-function curve is above the CSR line, it indicates clustering, meaning there are more points within distance `r` than expected under randomness.

-   **Below the CSR Line (K(r) \< CSR):** If the curve is below the CSR line, it suggests regularity or dispersion, meaning points are more spaced out than expected under randomness.

When calculating the K-function, edge corrections are often applied to adjust for boundary effects, where points near the edges of the study area might have fewer neighbors simply because the area cuts off.

Imagine you’re analyzing the spatial distribution of trees in a forest. The K-function would help you understand whether trees tend to cluster together or are regularly spaced over different distances. If your K-function plot shows significant clustering at certain distances, you might infer that trees in this forest tend to grow in groups rather than being evenly spread out.

Now for the Tampines planning area:

```{r}
K_tm = Kest(childcare_tm_ppp, correction = "Ripley")
plot(K_tm, . -r ~ r, 
     ylab= "K(d)-r", xlab = "d(m)", 
     xlim=c(0,1000))
```

This limits the x-axis to a range from 0 to 1000 meters. This means the plot will only show the K-function values for distances up to 1000 meters.

#### Hypothesis testing

To confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:

Ho = The distribution of childcare services at Choa Chu Kang are randomly distributed.

H1= The distribution of childcare services at Choa Chu Kang are not randomly distributed.

The null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.

```{r}
K_ck.csr <- envelope(childcare_ck_ppp, Kest, nsim = 99, rank = 1, glocal=TRUE)
```

```{r}
plot(K_ck.csr, . - r ~ r, xlab="d", ylab="K(d)-r")
```

For the Tampines planning area:

```{r}
K_tm.csr <- envelope(childcare_tm_ppp, Kest, nsim = 99, rank = 1, glocal=TRUE)
```

```{r}
plot(K_tm.csr, . - r ~ r, 
     xlab="d", ylab="K(d)-r", xlim=c(0,500))
```

### Computing L-function estimation

In this section, you will learn how to compute L-function estimation by using [*Lest()*](https://rdrr.io/cran/spatstat/man/Lest.html) of **spatstat** package. You will also learn how to perform Monte Carlo simulation test using *envelope()* of spatstat package.

```{r}
L_ck = Lest(childcare_ck_ppp, correction = "Ripley")
plot(L_ck, . -r ~ r, 
     ylab= "L(d)-r", xlab = "d(m)")
```

The L-function is a transformation of the K-function designed to make it easier to interpret the results of spatial point pattern analysis. The L-function is often used because it linearizes the K-function under the assumption of complete spatial randomness (CSR), making deviations from randomness easier to detect.

**Linear Under CSR:** Under complete spatial randomness (CSR), the L-function should be approximately equal to the distance `r`.

-   **Clustering:** If the observed is above the line, it indicates clustering at distance `r`. There are more points close to each other than expected under CSR.

-   **Dispersion:** If the observed is below the line, it indicates regularity or dispersion at distance `r`. The points are more evenly spaced than expected under CSR.

Now for the Tampines planning area:

```{r}
L_tm = Lest(childcare_tm_ppp, correction = "Ripley")
plot(L_tm, . -r ~ r, 
     ylab= "L(d)-r", xlab = "d(m)", 
     xlim=c(0,1000))
```

#### Hypothesis testing

To confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:

Ho = The distribution of childcare services at Choa Chu Kang are randomly distributed.

H1= The distribution of childcare services at Choa Chu Kang are not randomly distributed.

The null hypothesis will be rejected if p-value if smaller than alpha value of 0.001.

```{r}
L_ck.csr <- envelope(childcare_ck_ppp, Lest, nsim = 99, rank = 1, glocal=TRUE)
```

```{r}
plot(L_ck.csr, . - r ~ r, xlab="d", ylab="L(d)-r")
```

For the Tampines planning area:

```{r}
L_tm.csr <- envelope(childcare_tm_ppp, Lest, nsim = 99, rank = 1, glocal=TRUE)
```

```{r}
plot(L_tm.csr, . - r ~ r, 
     xlab="d", ylab="L(d)-r", xlim=c(0,500))
```
