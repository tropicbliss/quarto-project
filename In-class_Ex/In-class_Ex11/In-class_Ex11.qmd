---
title: "In-class Exercise 11"
author: "Eugene Toh"
date: "last-modified"
execute:
  freeze: true
---

```{r}
pacman::p_load(tidyverse, sf, tmap, httr, performance)
```

`httr` allows you to crawl data from the web.

```{r}
folder_path <- "data/aspatial"
file_list <- list.files(path = folder_path, pattern = "^realis.*\\.csv$", full.names = TRUE)
realis_data <- file_list %>% map_dfr(read_csv)
```

```{r}
sort(unique(realis_data$`Property Type`))
```

```{r}
condo_resale <- realis_data %>% mutate(`Sale Date` = dmy(`Sale Date`)) %>% filter(`Type of Sale` == "Resale" & `Property Type` == "Condominium")
```

Reverse geocoding allows you to pass postal codes or addresses and it will allow you to get XY coordinates.

```{r}
postcodes <- unique(condo_resale$`Postal Code`)
```

```r
url <- "https://onemap.gov.sg/api/common/elastic/search"
found <- data.frame()
not_found <- data.frame()

for (postcode in postcodes) {
  query <- list('searchVal'=postcode, 'returnGeom'='Y', 'getAddrDetails'='Y', 'pageNum'='1')
  res <- GET(url, query=query)
  if ((content(res)$found) != 0) {
    found <- rbind(found, data.frame(content(res))[4:13])
  } else {
    not_found <- data.frame(postcode)
  }
}
```

```r
found <- found %>% select(c(6:8)) %>% rename(POSTAL = `results.POSTAL`, XCOORD = `results.X`, YCOORD = `results.Y`)
```

```r
condo_resale_geocoded <- left_join(condo_resale, found, by = c('Postal Code' = 'POSTAL'))
```

```r
condo_resale_sf <- st_as_sf(condo_resale_geocoded, coords = c("XCOORD", "YCOORD"), crs = 3414)
```

If you need to do weighted regression, you need to avoid overlapping points, since there are places with the same postal code.

```r
overlapping_points <- condo_resale_sf %>% mutate(overlap = lengths(st_equals(., .)) > 1)
```

If there is overlapping, you should do spatial jittering by shifting each coordinate point randomly by 2 metres. Do not use too low values to avoid rounding.

```r
condo_resale_sf <- condo_resale_sf %>% st_jitter(amount = 2)
```

In take-home exercise 2:

If you take the islands into account, and a province contains islands, the centroids might drift into the sea for example. Hence, you might want to convert each row into polygons from multi-polygons. You might then result in multiple rows that refer to the same province, so you can keep the polygon that is the largest for each province.

``` r
sf_polygon <- prov_sf %>%
  st_cast("POLYGON") %>%
  mutate(area = st_area(.))
```

``` r
prov_cleaned <- sf_polygon %>%
  group_by(ADM1_EN) %>%
  filter(area == max(area)) %>%
  ungroup() %>%
  select(-area) %>%
  select(ADM1_EN)
```

This method would not remove Phuket, but other islands would be removed.
